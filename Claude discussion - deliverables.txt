Engineering Estimating Program - Complete Design Specification
Executive Summary
Building an estimating program for engineering projects that combines project execution methodology (phase-gate, fast-track, campaign) with equipment-driven deliverable generation. This hybrid approach provides accurate estimates by using equipment lists to generate deliverables while project type determines review cycles and execution strategy.
Core Concept: Two-Axis Estimation Model
Axis 1: Project Execution Type (HOW)
Determines workflow, review intensity, and stage-gate progression
Axis 2: Major Equipment List (WHAT)
Drives deliverable generation, quantities, and technical dependencies
Formula
Equipment List × Project Type × Complexity Factors = Project Estimate

1. STANDARD ISSUE STATES
Core Progression States
IFD (Issued for Design) → IFR (Issued for Review) → IFA (Issued for Approval) → 
IFB (Issued for Bid) → IFC (Issued for Construction)
Additional States

IFI - Issued for Information
IFP - Issued for Permit
IFM - Issued for Manufacture
AFC - Approved for Construction
AB - As-Built

State Progression Rules by Project Type

Phase-Gate: Full progression (IFD → IFR → IFA → IFB → IFC)
Fast-Track: Compressed (IFR → IFC, parallel paths)
Campaign: Direct to IFC (pre-approved designs)
Small Project: Simplified (IFR → IFC)


2. EQUIPMENT-BASED DELIVERABLE TEMPLATES
Concept
Each equipment type automatically generates a predictable set of deliverables across all disciplines.
Example Equipment Template Structure
python# Vessel Template Example
vessel_template = {
    "base_deliverables": [
        {"name": "Process Datasheet", "discipline": "Process", "base_hours": 16},
        {"name": "Mechanical Datasheet", "discipline": "Mechanical", "base_hours": 12},
        {"name": "Pressure Calculations", "discipline": "Mechanical", "base_hours": 20},
        {"name": "Nozzle Orientation Dwg", "discipline": "Mechanical", "base_hours": 16},
        {"name": "Foundation Design", "discipline": "Civil", "base_hours": 24},
        {"name": "Instrumentation Hookups", "discipline": "Instrument", "base_hours": 8},
        {"name": "Relief Valve Sizing", "discipline": "Safety", "base_hours": 8}
    ],
    "complexity_factors": {
        "simple": 1.0,
        "jacketed": 1.3,
        "high_pressure": 1.5,
        "exotic_material": 1.3
    },
    "size_factors": {
        "small": 0.8,   # <1000 gal
        "medium": 1.0,  # 1000-10000 gal
        "large": 1.3,   # >10000 gal
    }
}
Equipment Categories to Template
Vessels & Tanks

Pressure Vessels: Process/mechanical datasheets, pressure calcs, nozzle layouts
Storage Tanks: API 650/620 calcs, dike sizing, emissions calcs
Specialty: Reactors, crystallizers (add agitator specs, heat transfer calcs)

Rotating Equipment

Pumps: Datasheet, seal plans, vibration analysis, alignment procedures
Compressors: Performance curves, surge analysis, lube oil systems
Agitators: Mixing study, shaft/bearing calcs

Heat Transfer

Shell & Tube: TEMA datasheet, thermal design, tube pulling study
Air Coolers: Fin fan specs, noise study
Fired Heaters: Burner management, refractory specs, stack calcs

Package Units

Modular Packages: Interface specs only (vendor provides internal design)
Utility Systems: Instrument air, cooling water (often missed in MEL)


3. PROJECT EXECUTION TEMPLATES
Phase-Gate Project (FEL 1-3)
pythonphase_gate = {
    "phases": {
        "FEL1": {
            "deliverables": ["Basis of Design", "PFDs", "Equipment List"],
            "review_cycles": 2,
            "typical_states": ["IFI", "IFR"],
            "duration_weeks": 6
        },
        "FEL2": {
            "deliverables": ["P&IDs", "Plot Plan", "Equipment Datasheets"],
            "review_cycles": 3,
            "typical_states": ["IFD", "IFR", "IFA"],
            "duration_weeks": 12
        },
        "FEL3": {
            "deliverables": ["All IFC Drawings", "Procurement Packages"],
            "review_cycles": 2,
            "typical_states": ["IFB", "IFC"],
            "duration_weeks": 16
        }
    },
    "rework_factors": {
        "HAZOP": 0.25,  # 25% of P&IDs require rework
        "design_review": 0.15,
        "client_comments": 0.20
    }
}
Fast-Track Project
pythonfast_track = {
    "characteristics": {
        "parallel_development": True,
        "early_procurement": True,
        "compressed_reviews": True
    },
    "typical_progression": ["IFR", "IFC"],  # Skip IFA
    "review_cycles": 1.5,  # Reduced from 3
    "schedule_compression": 0.65,  # 35% faster
    "risk_multiplier": 1.2  # Higher risk = budget contingency
}
Campaign/Modular Project
pythoncampaign = {
    "standard_modules": {
        "progression": ["IFC"],  # Direct to construction
        "customization_hours": 0.2,  # 80% reduction
        "review_cycles": 0
    },
    "custom_elements": {
        "progression": ["IFR", "IFC"],
        "review_cycles": 1
    },
    "focus": "Interface documents critical"
}

4. INTEGRATED DATA MODEL
Core Entities and Relationships
python# Simplified data model structure
class Project:
    project_type: str  # phase_gate, fast_track, campaign, small
    equipment_list: List[Equipment]
    deliverables: List[Deliverable]
    complexity_factors: Dict
    
class Equipment:
    tag: str  # V-101, P-101A/B
    type: str  # vessel, pump, heat_exchanger
    subtype: str  # horizontal_vessel, centrifugal_pump
    size_capacity: str
    complexity: str  # simple, standard, complex
    special_requirements: List[str]
    generated_deliverables: List[Deliverable]
    
class Deliverable:
    id: str
    name: str
    discipline: str
    parent_equipment: Optional[Equipment]
    dependencies: List[Deliverable]
    issue_states: List[str]  # [IFD, IFR, IFA, IFC]
    current_state: str
    state_history: List[StateChange]
    estimated_hours: float
    actual_hours: float
    
class StateChange:
    from_state: str
    to_state: str
    timestamp: datetime
    comments: str
    approved_by: str

5. CALCULATION ENGINE
Hierarchical Estimation Logic
pythondef calculate_project_estimate(project):
    total_deliverables = []
    
    # Step 1: Generate equipment-based deliverables
    for equipment in project.equipment_list:
        equipment_deliverables = generate_from_template(equipment)
        
        # Step 2: Apply project type modifications
        for deliverable in equipment_deliverables:
            # Determine state progression based on project type
            deliverable.issue_states = get_states_for_project_type(
                project.project_type, 
                deliverable.type
            )
            
            # Calculate hours with all factors
            deliverable.estimated_hours = calculate_hours(
                base_hours=deliverable.base_hours,
                equipment_complexity=equipment.complexity_factor,
                project_type_factor=project.type_factor,
                review_cycles=project.review_intensity,
                rework_factor=project.rework_expectations
            )
            
        total_deliverables.extend(equipment_deliverables)
    
    # Step 3: Add non-equipment deliverables
    project_deliverables = get_project_level_deliverables(project.project_type)
    total_deliverables.extend(project_deliverables)
    
    # Step 4: Check dependencies and flag issues
    validate_dependencies(total_deliverables)
    
    # Step 5: Calculate schedule
    schedule = calculate_critical_path(total_deliverables)
    
    return {
        "deliverables": total_deliverables,
        "total_hours": sum(d.estimated_hours for d in total_deliverables),
        "schedule_weeks": schedule.duration,
        "critical_path": schedule.critical_items
    }

6. USER INTERFACE DESIGN
Workflow Screens
Screen 1: Project Configuration

Select project execution type (phase-gate, fast-track, campaign)
Choose regulatory regime (none, light, moderate, heavy)
Set client type (internal, private, government, FDA)
Define project complexity (1-5 scale)

Screen 2: Equipment List Input
Major Equipment List Builder
┌─────────────────────────────────────────────────┐
│ [Quick Add]: Vessel | Pump | HX | Tank | Compr  │
├─────────────────────────────────────────────────┤
│ Import: [Excel] [P&ID] [Equipment List]         │
├─────────────────────────────────────────────────┤
│ Tag      Type         Size       Complexity     │
│ V-101    Vessel       10m³       Standard   [✎] │
│ P-101A/B Centrifugal  500gpm     W/ Spare   [✎] │
│ E-101    Shell&Tube   100m²      Standard   [✎] │
│                                                  │
│ + Add Equipment                                  │
└─────────────────────────────────────────────────┘
Summary: 3 equipment items → 45 deliverables → 680 hrs
Screen 3: Deliverable Review & Customization

View auto-generated deliverables grouped by:

Equipment tag
Discipline
Issue state
Phase/milestone


Customize specific items:

Adjust hours
Change state progression
Add/remove deliverables


Dependency visualization

Screen 4: Factors & Adjustments
Rework & Iteration Factors
├─ HAZOP Impact:        [====|====] 25%
├─ Design Reviews:      [==|======] 2.5 cycles
├─ Client Comments:     [===|=====] 3 cycles
└─ Vendor Info Delays:  [=|=======] 2 weeks

Schedule Optimization
○ Sequential (baseline)
● Moderate Parallel (20% compression)
○ Aggressive Parallel (35% compression, +risk)
Screen 5: Results & Export

Total hours by discipline/phase
Critical path visualization
Risk-adjusted contingencies
Export options:

Excel breakdown
MS Project schedule
Primavera P6
PDF report



Key UI Features
Dependency Management

Visual dependency mapper
Auto-flag missing prerequisites
Show impact of changes immediately

Smart Defaults with Override

Templates provide starting point
All values editable
Track changes from baseline

Learning System

Compare to similar historical projects
Show statistical ranges: "Similar projects: 2.3-3.1 review cycles"
Update defaults based on actuals


7. ADVANCED FEATURES
Change Management
When equipment is added/removed/modified:
pythondef handle_equipment_change(equipment, change_type):
    if change_type == "DELETE":
        # Remove all associated deliverables
        # Recalculate dependencies
        # Update schedule
    elif change_type == "MODIFY":
        # Identify affected deliverables
        # Recalculate hours
        # Flag for review if significant
    elif change_type == "ADD":
        # Generate new deliverables
        # Check for interface requirements
        # Update resource loading
Partial Issue Capability

"IFC except instrumentation"
"IFA pending client comments on internals only"
Track partial completions for progress reporting

Resource Loading

Show discipline loading over time
Identify resource conflicts
Level loading options

Template Library

Save successful project as template
Industry-specific template sets
Client-specific requirements overlay


8. IMPLEMENTATION PRIORITIES
Phase 1: Core Functionality

Equipment-based deliverable generation
Project type modifiers
Basic dependency checking
Hours calculation
Simple Excel export

Phase 2: Enhanced Features

Visual dependency mapping
Resource loading charts
Schedule optimization
Rework tracking
Template library

Phase 3: Intelligence Layer

Historical data analysis
Predictive adjustments
Risk scoring
Automated recommendations
Integration with project management tools


9. KEY DECISIONS FOR IMPLEMENTATION
Architecture Questions

Web app vs desktop? (Recommend web for collaboration)
Database choice? (PostgreSQL for complex relationships)
Frontend framework? (React for complex UI interactions)
Calculation engine? (Python backend for flexibility)

Data Structure Priorities

Maintain full audit trail of changes
Version control for templates
Flexible enough for custom fields
Performance with 1000+ deliverables

Critical Success Factors

Speed: Generate estimate in <30 seconds
Accuracy: Within 10% of actual hours
Flexibility: Handle any project type
Usability: New user productive in <1 hour


10. EXAMPLE USE CASE
Project: Small Pharmaceutical Expansion

Type: Fast-track
Equipment: 3 vessels, 8 pumps, 2 heat exchangers
Regulatory: FDA-regulated (heavy)

System Process:

Equipment generates: 195 base deliverables
FDA overlay adds: 45 validation documents
Fast-track modifies: Compressed to 2 issue states average
Hours calculated: 3,200 engineering hours
Schedule: 14 weeks with parallel execution
Risk flagged: "Fast-track + FDA = High risk, recommend 20% contingency"


Questions for Claude Code/Cursor Implementation

Should equipment templates be hardcoded or user-editable?
How much AI/ML for predictions vs rule-based calculations?
Integration needs with existing systems (ERP, project management)?
Multi-user collaboration requirements?
Offline capability needed?
How to handle template versioning and updates?
Audit trail requirements for regulatory projects?

This specification combines both the project-type approach and equipment-driven generation into a unified system that should provide highly accurate estimates while remaining flexible enough for various industries and project types.RetryClaude can make mistakes. Please double-check responses. Opus 4.1